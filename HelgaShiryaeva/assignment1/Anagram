import java.util.*;

public class Anagram {
    /**
     * Supports punctuation marks : ?!,.:
     * @param first is the first string to be detected if it is an anagram of
     * @param second string
     * @return true if strings are anagrams
     */
    public boolean areAnagrams(String first, String second) {
        if(first.length() != second.length()) {
            return false;
        }
        String PUNCTUATION_MARKS = " ,?!.:";
        StringTokenizer stringTokenizerFirst = new StringTokenizer(first, PUNCTUATION_MARKS );
        StringTokenizer stringTokenizerSecond = new StringTokenizer(second, PUNCTUATION_MARKS);
        if(stringTokenizerFirst.countTokens() != stringTokenizerSecond.countTokens()) {
            return false;
        }
        List<String> firstStringWords = new ArrayList<>();
        while(stringTokenizerFirst.hasMoreTokens()) {
            firstStringWords.add(stringTokenizerFirst.nextToken());
        }
        while(stringTokenizerSecond.hasMoreTokens()) {
            String wordFromSecondString = stringTokenizerSecond.nextToken();
            boolean isAnagram = false;
            for(String wordFromFirstString : firstStringWords) {
                if(areWordsAnagrams(wordFromFirstString, wordFromSecondString)) {
                    isAnagram = true;
                    break;
                }
            }
            if(!isAnagram) {
                return false;
            }
        }
        return true;
    }

    private boolean areWordsAnagrams(String first, String second) {
        Map<Character, Integer> characterCountMap = new HashMap<>();
        for(char c : first.toCharArray()) {
            if(characterCountMap.containsKey(c)) {
                characterCountMap.put(c, characterCountMap.get(c) + 1);
            } else {
                characterCountMap.put(c, 1);
            }
        }
        for(char c : second.toCharArray()) {
            Integer count = characterCountMap.get(c);
            if(count == null || count == 0) {
                return false;
            }
            characterCountMap.put(c, characterCountMap.get(c) - 1);
        }
        for(Map.Entry<Character, Integer> entry : characterCountMap.entrySet()) {
            if(entry.getValue() != 0) {
                return false;
            }
        }
        return true;
    }
}
