public class ReversedListAccessUtil {
    public <T> T getReversed(int index, MyList<T> list) {
      return list.get(list.size() - index);
    }
}
class MyList<T> {
    private Node head;
    private Node tail;
    private int size;

    public MyList() {
        head = null;
        tail = null;
        size = 0;
    }

    private void insert(T data, int index) {
        if (index > size) {
            throw new IllegalArgumentException("Illegal index : " + index);
        } else {
            Node temp = new Node(data);
            Node current = getNode(index);
            if (index == 0) {
                temp.setNext(head);
                head = temp;
                tail = head;
            } else {
                temp.setNext(current.getNext());
                current.setNext(temp);
            }
            if ( index == size - 1 ) {
                tail.setNext(temp);
                tail = temp;
            }
        }
        size++;
    }

    public void add(T data) {
        insert(data, size);
    }

    private Node getNode(int index) {
        if ( index > size ) {
            throw new IllegalArgumentException("Index " + index + " is greater than the current size " + size + ".");
        }
        Node current = head;
        for (int i = 1; i < index; i++) {
            current = current.getNext();
        }
        return current;
    }

    public T get(int index) {
        return getNode(index).getValue();
    }

    public int size() {
        return this.size;
    }

    private class Node {
        Node next;
        T value;

        Node(T value) {
            this(value, null);
        }

        Node(T value, Node next) {
            this.next = next;
            this.value = value;
        }

        T getValue() {
            return this.value;
        }

        public void setValue(T value) {
            this.value = value;
        }

        Node getNext() {
            return this.next;
        }

        void setNext(Node nextNode) {
            this.next = nextNode;
        }
    }
}
