package assignment4;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class IslandsCounterTest {

    @Test
    public void threeComponentsTest() {
        boolean tiles[][] = {
                {false, true, false, true},
                {true, true, false, false},
                {false, false, true, false},
                {false, false, true, false}
        };
        IslandsCounter islandsCounter = new IslandsCounter();
        assertEquals(3, islandsCounter.countIslands(tiles));
    }

    @Test
    public void sixComponentsTest() {
        boolean tiles[][] = {
                {false, true, false, true},
                {true, true, false, false},
                {true, true, false, true},
                {false, false, true, false},
                {true, false, true, false},
                {true, false, true, false},
                {false, true, true, false},
                {true, false, true, false}
        };
        IslandsCounter islandsCounter = new IslandsCounter();
        assertEquals(6, islandsCounter.countIslands(tiles));
    }

    @Test
    public void zeroComponentsTest() {
        boolean tiles[][] = {
                {false, false, false},
                {false, false, false},
                {false, false, false},
                {false, false, false}
        };
        IslandsCounter islandsCounter = new IslandsCounter();
        assertEquals(0, islandsCounter.countIslands(tiles));
    }

    @Test
    public void oneComponentTest() {
        boolean tiles[][] = {
                {false, true, false},
                {false, true, false},
                {true, true, true},
                {false, false, false}
        };
        IslandsCounter islandsCounter = new IslandsCounter();
        assertEquals(1, islandsCounter.countIslands(tiles));
    }

    @Test
    public void islandWithoutWaterTest() {
        boolean tiles[][] = {
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true},
                {true, true, true}
        };
        IslandsCounter islandsCounter = new IslandsCounter();
        assertEquals(1, islandsCounter.countIslands(tiles));
    }

    @Test(expected = IllegalArgumentException.class)
    public void emptyTilesTest() {
        boolean tiles[][] = {};
        IslandsCounter islandsCounter = new IslandsCounter();
        islandsCounter.countIslands(tiles);
    }

    @Test(expected = IllegalArgumentException.class)
    public void emptyTilesRowsTest() {
        boolean tiles[][] = {
                {},
                {},
                {},
                {},
                {},
                {},
                {}
        };
        IslandsCounter islandsCounter = new IslandsCounter();
        islandsCounter.countIslands(tiles);
    }
}
